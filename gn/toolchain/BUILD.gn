# Copy of `llvm/utils/gn/build/toolchain/BUILD.gn` with minor modifications.

import("//build_overrides/clspv.gni")

unix_copy_command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"

template("target_toolchain") {
  toolchain(target_name) {
    # https://groups.google.com/a/chromium.org/g/gn-dev/c/F_lv5T-tNDM
    forward_variables_from(invoker.toolchain_args, "*")
    not_needed("*")

    forward_variables_from(invoker, "*")

    cc = "cc"
    cxx = "c++"

    if (clang_base_path != "") {
      cc = rebase_path(clang_base_path, root_build_dir) + "/bin/clang"
      cxx = rebase_path(clang_base_path, root_build_dir) + "/bin/clang++"
    }

    ld = cxx  # Don't use goma wrapper for linking.
    if (use_goma) {
      cc = "$goma_dir/gomacc $cc"
      cxx = "$goma_dir/gomacc $cxx"
    }

    tool("cc") {
      depfile = "{{output}}.d"
      command = "$cc -MMD -MF $depfile -o {{output}} -c {{source}} {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}"
      depsformat = "gcc"
      description = "CC {{output}}"
      outputs = [ "{{source_out_dir}}/{{label_name}}.{{source_name_part}}.o" ]
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      command = "$cxx -MMD -MF $depfile -o {{output}} -c {{source}} {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}"
      depsformat = "gcc"
      description = "CXX {{output}}"
      outputs = [ "{{source_out_dir}}/{{label_name}}.{{source_name_part}}.o" ]
    }

    tool("objcxx") {
      depfile = "{{output}}.d"
      command = "$cxx -MMD -MF $depfile -o {{output}} -c {{source}} {{defines}} {{include_dirs}} {{cflags}} {{cflags_objcc}}"
      depsformat = "gcc"
      description = "OBJCXX {{output}}"
      outputs = [ "{{source_out_dir}}/{{label_name}}.{{source_name_part}}.o" ]
    }

    tool("asm") {
      depfile = "{{output}}.d"
      command = "$cc -MMD -MF $depfile -o {{output}} -c {{source}} {{defines}} {{include_dirs}} {{asmflags}}"
      depsformat = "gcc"
      description = "ASM {{output}}"
      outputs = [ "{{source_out_dir}}/{{label_name}}.{{source_name_part}}.o" ]
    }

    tool("alink") {
      if (current_os == "ios" || current_os == "mac") {
        command = "libtool -D -static -no_warning_for_no_symbols {{arflags}} -o {{output}} {{inputs}}"
      } else {
        # Remove the output file first so that ar doesn't try to modify the
        # existing file.
        command =
            "rm -f {{output}} && $ar rcsD {{arflags}} {{output}} {{inputs}}"
      }
      description = "AR {{output}}"
      outputs = [ "{{output_dir}}/{{target_output_name}}.a" ]
      output_prefix = "lib"
      default_output_dir = "{{root_out_dir}}/lib"
    }

    if (current_os == "ios" || current_os == "mac") {
      # gn < 1693 (e214b5d35898) doesn't support |frameworks|, requiring
      # frameworks to be listed in |libs|, but gn >= 1808 (3028c6a426a4) forbids
      # frameworks from appearing in |libs|. This assertion provides a helpful
      # cue to upgrade, and is much more user-friendly than the failure that
      # occurs when an older gn encounters |frameworks|.
      #
      # gn_version doesnâ€™t actually exist in gn < 1709 (52cb644a3fb4), and
      # defined(gn_version) doesn't actually work as expected
      # (https://crbug.com/gn/183), so 1709 is the true minimum enforced by
      # this construct, and if gn_version is not available, this line will still
      # be blamed, making the resolution somewhat discoverable.
      assert(gn_version >= 1693,
             "Your GN is too old! " +
                 "Update it, perhaps by running ${llvm_build_root}get.py")
    }

    # Make these apply to all tools below.
    lib_switch = "-l"
    lib_dir_switch = "-L"

    tool("solink") {
      outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      if (current_os == "ios" || current_os == "mac") {
        command = "$ld -shared {{ldflags}} -o $outfile {{inputs}} {{libs}} {{frameworks}}"
        default_output_extension = ".dylib"
      } else {
        command = "$ld -shared {{ldflags}} -Wl,-soname,{{target_output_name}}{{output_extension}} -o $outfile {{inputs}} {{libs}}"
        default_output_extension = ".so"
      }
      description = "SOLINK $outfile"
      outputs = [ outfile ]
      output_prefix = "lib"
      default_output_dir = "{{root_out_dir}}/lib"
    }

    tool("solink_module") {
      outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      if (current_os == "ios" || current_os == "mac") {
        command = "$ld -shared {{ldflags}} -Wl,-flat_namespace -Wl,-undefined,suppress -o $outfile {{inputs}} {{libs}} {{frameworks}}"
        default_output_extension = ".dylib"
      } else {
        command = "$ld -shared {{ldflags}} -Wl,-soname,{{target_output_name}}{{output_extension}} -o $outfile {{inputs}} {{libs}}"
        default_output_extension = ".so"
      }
      description = "SOLINK $outfile"
      outputs = [ outfile ]
      default_output_dir = "{{root_out_dir}}/lib"
    }

    tool("link") {
      outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      if (current_os == "ios" || current_os == "mac") {
        command =
            "$ld {{ldflags}} -o $outfile {{inputs}} {{libs}} {{frameworks}}"
      } else {
        command = "$ld {{ldflags}} -o $outfile -Wl,--start-group {{inputs}} -Wl,--end-group {{libs}}"
      }
      description = "LINK $outfile"
      outputs = [ outfile ]

      # Setting this allows targets to override the default executable output by
      # setting output_dir.
      # Matching this to Angle default output dir
      default_output_dir = "{{root_out_dir}}"
    }

    tool("copy") {
      command = unix_copy_command
      description = "COPY {{source}} {{output}}"
    }

    if (current_os == "ios" || current_os == "mac") {
      tool("copy_bundle_data") {
        # https://github.com/nico/hack/blob/master/notes/copydir.md
        _copydir = "cd {{source}} && " +
                   "find . | cpio -pdl \"\$OLDPWD\"/{{output}} 2>/dev/null"
        command = "rm -rf {{output}} && if [[ -d {{source}} ]]; then " +
                  _copydir + "; else " + unix_copy_command + "; fi"
        description = "COPY_BUNDLE_DATA {{source}} {{output}}"
      }
      tool("compile_xcassets") {
        command = "false"
        description = "The LLVM build doesn't use any xcasset files"
      }
    }

    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }
  }
}

target_toolchain("host") {
  if (current_os != "ios" && current_os != "mac") {
    if (clang_base_path != "") {
      ar = rebase_path(clang_base_path, root_build_dir) + "/bin/llvm-ar"
    } else {
      ar = "ar"
    }
  }

  toolchain_args = {
    current_os = host_os
    current_cpu = host_cpu
  }
}

if (android_ndk_path != "") {
  # aarch64 toolchain
  target_toolchain("android_aarch64") {
    if (clang_base_path != "") {
      ar = rebase_path(clang_base_path, root_build_dir) + "/bin/llvm-ar"
    } else {
      ar = "ar"
    }
    toolchain_args = {
      current_os = "android"
      current_cpu = "arm64"
    }
  }
  target_toolchain("android_arm") {
    if (clang_base_path != "") {
      ar = rebase_path(clang_base_path, root_build_dir) + "/bin/llvm-ar"
    } else {
      ar = "ar"
    }
    toolchain_args = {
      current_os = "android"
      current_cpu = "arm"
    }
  }
}
