# Copyright 2017 The Clspv Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if(NOT DEFINED BAKE_FILE_INPUT_FILE)
  message(FATAL_ERROR
    "Required cmake variable BAKE_FILE_INPUT_FILE not set!"
  )
endif()

if(NOT DEFINED BAKE_FILE_OUTPUT_FILE)
  message(FATAL_ERROR
    "Required cmake variable BAKE_FILE_OUTPUT_FILE not set!"
  )
endif()

if(NOT DEFINED BAKE_FILE_BASE_HEADER_FILE)
  message(FATAL_ERROR
    "Required cmake variable BAKE_FILE_BASE_HEADER_FILE not set!"
  )
endif()

if(NOT DEFINED BAKE_FILE_DATA_VARIABLE_NAME)
  message(FATAL_ERROR
    "Required cmake variable BAKE_FILE_DATA_VARIABLE_NAME not set!"
  )
endif()

if(NOT DEFINED BAKE_FILE_SIZE_VARIABLE_NAME)
  message(FATAL_ERROR
    "Required cmake variable BAKE_FILE_SIZE_VARIABLE_NAME not set!"
  )
endif()

if(NOT DEFINED BAKE_FILE_DATA_BASE_VARIABLE_NAME)
  message(FATAL_ERROR
    "Required cmake variable BAKE_FILE_DATA_BASE_VARIBLE_NAME not set!"
  )
endif()

if(NOT DEFINED BAKE_FILE_SIZE_BASE_VARIABLE_NAME)
  message(FATAL_ERROR
    "Required cmake variable BAKE_FILE_SIZE_BASE_VARIBLE_NAME not set!"
  )
endif()

if(NOT EXISTS ${BAKE_FILE_INPUT_FILE})
  message(FATAL_ERROR "File '${BAKE_FILE_INPUT_FILE}' does not exist!")
endif()

file(READ "${BAKE_FILE_INPUT_FILE}" contents HEX)

string(LENGTH ${contents} contentsSize)
# + 1 for the added null terminator
math(EXPR contentsSize "(${contentsSize} / 2) + 1")

file(READ "${BAKE_FILE_BASE_HEADER_FILE}" baseContents HEX)

string(LENGTH ${baseContents} baseContentsSize)
# + 1 for the add null terminator
math(EXPR baseContentsSize "(${baseContentsSize} / 2) + 1")

string(TOUPPER "${BAKE_FILE_OUTPUT_FILE}" header_ifndef)
string(REGEX REPLACE "[^A-Z]" "_" header_ifndef "${header_ifndef}")
set(header_ifndef "__${header_ifndef}__")

file(WRITE "${BAKE_FILE_OUTPUT_FILE}" "// Copyright 2017 The Clspv Authors. All rights reserved.\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "//\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "// Licensed under the Apache License, Version 2.0 (the \"License\");\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "// you may not use this file except in compliance with the License.\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "// You may obtain a copy of the License at\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "//\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "//     http://www.apache.org/licenses/LICENSE-2.0\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "//\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "// Unless required by applicable law or agreed to in writing, software\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "// distributed under the License is distributed on an \"AS IS\" BASIS,\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "// See the License for the specific language governing permissions and\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "// limitations under the License.\n\n")

file(APPEND "${BAKE_FILE_OUTPUT_FILE}"
  "// THIS FILE IS AUTOGENERATED DO NOT EDIT!\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "#ifndef ${header_ifndef}\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "#define ${header_ifndef}\n")

file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "#ifdef __cplusplus\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "extern \"C\" {\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "#endif\n\n")

file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "static const unsigned int ${BAKE_FILE_SIZE_VARIABLE_NAME} = ${contentsSize};\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "static const char ${BAKE_FILE_DATA_VARIABLE_NAME}[${BAKE_FILE_SIZE_VARIABLE_NAME}] = {\n")

string(REGEX MATCHALL ".." output "${contents}")
string(REGEX REPLACE ";" "',\n  '\\\\x" output "${output}")

file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "  '\\x${output}',\n  '\\0'\n};\n\n")

file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "static const unsigned int ${BAKE_FILE_SIZE_BASE_VARIABLE_NAME} = ${baseContentsSize};\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "static const char ${BAKE_FILE_DATA_BASE_VARIABLE_NAME}[${BAKE_FILE_SIZE_BASE_VARIABLE_NAME}] = {\n")

string(REGEX MATCHALL ".." output "${baseContents}")
string(REGEX REPLACE ";" "',\n  '\\\\x" output "${output}")

file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "  '\\x${output}',\n  '\\0'\n};\n\n")

file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "#ifdef __cplusplus\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "}\n")
file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "#endif\n")

file(APPEND "${BAKE_FILE_OUTPUT_FILE}" "#endif//${header_ifndef}\n\n")
