# Copyright 2017 The Clspv Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if(NOT DEFINED STRIP_BANNED_OPENCL_FEATURES_INPUT_FILE)
  message(FATAL_ERROR
    "Required cmake variable STRIP_BANNED_OPENCL_FEATURES_INPUT_FILE not set!"
  )
endif()

if(NOT DEFINED STRIP_BANNED_OPENCL_FEATURES_OUTPUT_FILE)
  message(FATAL_ERROR
    "Required cmake variable STRIP_BANNED_OPENCL_FEATURES_OUTPUT_FILE not set!"
  )
endif()

if(NOT EXISTS ${STRIP_BANNED_OPENCL_FEATURES_INPUT_FILE})
  message(FATAL_ERROR "File '${STRIP_BANNED_OPENCL_FEATURES_INPUT_FILE}' does not exist!")
endif()

file(READ "${STRIP_BANNED_OPENCL_FEATURES_INPUT_FILE}" lines)

string(REGEX REPLACE "\n[^\n]*char8[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*char16[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*short8[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*short16[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*int8[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*int16[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*long8[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*long16[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*float8[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*float16[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*double8[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*double16[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*half8[^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*half16[^\n]*" "" lines "${lines}")

string(REGEX REPLACE "\n[^\n]*_rt[pn][^\n]*" "" lines "${lines}")
string(REGEX REPLACE "\n[^\n]*_sat[^\n]*" "" lines "${lines}")

# Declare the invalid vector types so we can issue better error messages
set(BANNED_VECTOR_TYPES "")
foreach(LEN "8" "16")
  foreach(ELEM "char" "uchar" "short" "ushort" "int" "uint" "long" "ulong" "half" "float" "double")
    list(APPEND BANNED_VECTOR_TYPES
         "typedef ${ELEM} ${ELEM}${LEN} __attribute__((ext_vector_type(${LEN})))\;\n")
  endforeach(ELEM)
  list(APPEND BANNED_VECTOR_TYPES
         "#ifdef cl_khr_fp16\n"
         "typedef half half${LEN} __attribute__((ext_vector_type(${LEN})))\;\n"
	 "#endif\n")
  list(APPEND BANNED_VECTOR_TYPES
         "#ifdef cl_khr_fp64\n"
         "typedef double double${LEN} __attribute__((ext_vector_type(${LEN})))\;\n"
	 "#endif\n")
endforeach(LEN)
string(CONCAT BANNED_VECTOR_TYPE_DECLS ${BANNED_VECTOR_TYPES})
string(REGEX REPLACE
  "typedef __UINTPTR_TYPE__ uintptr_t;"
  "typedef __UINTPTR_TYPE__ uintptr_t;\n// Banned vector types\n${BANNED_VECTOR_TYPE_DECLS}"
  lines
  "${lines}")

# Write it all out to the file.
file(WRITE "${STRIP_BANNED_OPENCL_FEATURES_OUTPUT_FILE}" "${lines}")

# Declare some extra builtins
set(clspv_builtins "")
set(o "__attribute__((overloadable))")
list(APPEND clspv_builtins "\nfloat4 ${o} __clspv_vloada_half4(size_t, const global uint2*)")
list(APPEND clspv_builtins "\nfloat4 ${o} __clspv_vloada_half4(size_t, const local uint2*)")
list(APPEND clspv_builtins "\nfloat4 ${o} __clspv_vloada_half4(size_t, const private uint2*)")
list(APPEND clspv_builtins "\nfloat2 ${o} __clspv_vloada_half2(size_t, const global uint*)")
list(APPEND clspv_builtins "\nfloat2 ${o} __clspv_vloada_half2(size_t, const local uint*)")
list(APPEND clspv_builtins "\nfloat2 ${o} __clspv_vloada_half2(size_t, const private uint*)")
file(APPEND "${STRIP_BANNED_OPENCL_FEATURES_OUTPUT_FILE}" "${clspv_builtins};")
