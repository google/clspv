#!amber

SHADER compute ctz OPENCL-C
kernel void test_ctz(global int* a, global int* b) {
  uint gid = get_global_id(0);
  b[gid] = ctz(a[gid]);
}
END

BUFFER a_buf DATA_TYPE uint32 DATA
0x00000001
0x00000002
0x00000004
0x00000008
0x00000010
0x00000020
0x00000040
0x00000080
0x00000100
0x00000200
0x00000400
0x00000800
0x00001000
0x00002000
0x00004000
0x00008000
0x00010000
0x00020000
0x00040000
0x00080000
0x00100000
0x00200000
0x00400000
0x00800000
0x01000000
0x02000000
0x04000000
0x08000000
0x10000000
0x20000000
0x40000000
0x80000000
0x00000000
END

BUFFER b_buf DATA_TYPE uint32 SIZE 33 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 33 SERIES_FROM 0 INC_BY 1

PIPELINE compute test_pipe
  ATTACH ctz ENTRY_POINT test_ctz
  COMPILE_OPTIONS ctz
    --cl-std=CL2.0 --inline-entry-points
  END

  BIND BUFFER a_buf KERNEL ARG_NAME a
  BIND BUFFER b_buf KERNEL ARG_NAME b
END

RUN test_pipe 33 1 1

EXPECT b_buf EQ_BUFFER expected

